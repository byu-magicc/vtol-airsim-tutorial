Automatically generated by Mendeley Desktop 1.19.8
Any changes to this file will be lost if it is regenerated by Mendeley.

BibTeX export options can be customized via Options -> BibTeX in Mendeley Desktop

@misc{Blender2021,
author = {{Blender Foundation}},
title = {{Blender}},
url = {https://www.blender.org},
year = {2021}
}
@misc{OpenRobotics2013,
abstract = {As the full name of Robot Operating System suggests, ROS is an operating system for robots. In the same way as operating systems for PCs, servers or standalone devices, ROS is a full operating system for service robotics. ROS is in fact a meta-operating system, something between an operating system and middleware. It provides not only standard operating system services (hardware abstraction, contention management, process management), but also high-level functionalities (asynchronous and synchronous calls, centralised database, a robot configuration system, etc.).},
author = {{Open Robotics}},
booktitle = {ROS.org},
title = {{ROS (Robot Operating System)}},
year = {2013}
}
@incollection{Shah2018,
abstract = {Developing and testing algorithms for autonomous vehicles in real world is an expensive and time consuming process. Also, in order to utilize recent advances in machine intelligence and deep learning we need to collect a large amount of annotated training data in a variety of conditions and environments. We present a new simulator built on Unreal Engine that offers physically and visually realistic simulations for both of these goals. Our simulator includes a physics engine that can operate at a high frequency for real-time hardware-in-the-loop (HITL) simulations with support for popular protocols (e.g. MavLink). The simulator is designed from the ground upÂ to be extensible to accommodate new types of vehicles, hardware platforms and software protocols. In addition, the modular design enables various components to be easily usable independently in other projects. We demonstrate the simulator by first implementing a quadrotor as an autonomous vehicle and then experimentally comparing the software components with real-world flights.},
author = {Shah, Shital and Dey, Debadeepta and Lovett, Chris and Kapoor, Ashish},
booktitle = {Springer Proceedings in Advanced Robotics},
doi = {10.1007/978-3-319-67361-5_40},
issn = {25111264},
title = {{AirSim: High-Fidelity Visual and Physical Simulation for Autonomous Vehicles}},
volume = {5},
year = {2018}
}
@misc{X-plane112020,
author = {{Laminar Research}},
title = {{X-Plane 11}},
url = {https://www.x-plane.com},
year = {2020}
}
@inproceedings{Koenig2004,
abstract = {Simulators have played a critical role in robotics research as tools for quick and efficient testing of new concepts, strategies, and algorithms. To date, most simulators have been restricted to 2D worlds, and few have matured to the point where they are both highly capable and easily adaptable. Gazebo is designed to fill this niche by creating a 3D dynamic multi-robot environment capable of recreating the complex worlds that will be encountered by the next generation of mobile robots. Its open source status, fine grained control, and high fidelity place Gazebo in a unique position to become more than just a stepping stone between the drawing board and real hardware: data visualization, simulation of remote environments, and even reverse engineering of black-box systems are all possible applications. Gazebo is developed in cooperation with the Player and Stage projects [1], [2], [3], and is available from http://playerstage.sourceforge.net/gazebo/gazebo.html.},
author = {Koenig, Nathan and Howard, Andrew},
booktitle = {2004 IEEE/RSJ International Conference on Intelligent Robots and Systems (IROS)},
doi = {10.1109/iros.2004.1389727},
title = {{Design and use paradigms for Gazebo, an open-source multi-robot simulator}},
volume = {3},
year = {2004}
}
@misc{Games2020,
author = {{Epic Games}},
title = {{Unreal Engine}},
url = {https://www.unrealengine.com},
year = {2020}
}
@inproceedings{Ruf2018,
abstract = {In order to improve usability and safety, modern unmanned aerial vehicles (UAVs) are equipped with sensors to monitor the environment, such as laser-scanners and cameras. One important aspect in this monitoring process is to detect obstacles in the flight path in order to avoid collisions. Since a large number of consumer UAVs suffer from tight weight and power constraints, our work focuses on obstacle avoidance based on a lightweight stereo camera setup. We use disparity maps, which are computed from the camera images, to locate obstacles and to automatically steer the UAV around them. For disparity map computation we optimize the well-known semi-global matching (SGM) approach for the deployment on an embedded FPGA. The disparity maps are then converted into simpler representations, the so called U-/V-Maps, which are used for obstacle detection. Obstacle avoidance is based on a reactive approach which finds the shortest path around the obstacles as soon as they have a critical distance to the UAV. One of the fundamental goals of our work was the reduction of development costs by closing the gap between application development and hardware optimization. Hence, we aimed at using high-level synthesis (HLS) for porting our algorithms, which are written in C/C++, to the embedded FPGA. We evaluated our implementation of the disparity estimation on the KITTI Stereo 2015 benchmark. The integrity of the overall real-time reactive obstacle avoidance algorithm has been evaluated by using Hardware-in-the-Loop testing in conjunction with two flight simulators.},
author = {Ruf, B. and Monka, S. and Kollmann, M. and Grinberg, M.},
booktitle = {International Archives of the Photogrammetry, Remote Sensing and Spatial Information Sciences - ISPRS Archives},
doi = {10.5194/isprs-archives-XLII-1-363-2018},
issn = {16821750},
number = {1},
title = {{Real-time on-board obstacle avoidance for UAVs based on embedded stereo vision}},
volume = {42},
year = {2018}
}
@inproceedings{Gimenes2008,
abstract = {Developed countries have made significant efforts to integrate UAV operations in controlled aerial space due to a rising interest of using UAVs for civilian and military purposes. This paper focuses on looking for reliable solutions and a way to validate an autonomous multiagent control system using Flight Simulators. This study has two main lines, the first being the use of multiagent systems in UAVs (or other robotic platforms), aiming at a fully autonomous control. The second is a survey about the variety of simulation systems dedicated to aerodynamics and aircrafts, comparing them and their feasibility to validate the multiagent control system. A comparative study of existing simulation environments is presented, both commercial simulation game engines and research simulators. One critical factor is hazard situations, like emergency landing or equipment failure, which should be predicted in an automated system. Most flight simulators are not realistic enough to validate a multiagent algorithm in hazard situations. At the same time, it is impossible to predict every type of failure in real world. The boundaries of simulation should be very well enclosured in order to present results using simulation. A multiagent control system architecture that makes use of flight simulators is also presented.},
author = {Gimenes, R and Silva, DC and Reis, LP and Oliveira, E},
booktitle = {Autonomous Robot Systems and Competitions},
file = {:home/seth/Downloads/RG_DCS_LPR_ECO_Robotica08.pdf:pdf},
isbn = {9789729689536},
pages = {21--26},
title = {{Using Flight Simulation Environments with Agent-Controlled UAVs}},
url = {http://www.researchgate.net/publication/228447878_Using_flight_simulation_environments_with_agent-controlled_UAVs/file/3deec51a45c7f14b4f.pdf},
year = {2008}
}
@inproceedings{Louali2011,
abstract = {The purpose of this paper is to describe a real-time characterization of FS2004 by measuring the dynamic model rate and quantify its temporal stability. This is done to evaluate Flight Simulator 2004 for a potential integration into HIL (Hardware In the Loop architecture) architecture used in developing embedded systems on UAVs. After a general presentation of the simulator and the reasons which lead us to study it, we describe the experimental procedure based on the definition of real-time simulation and Monte Carlo Method. Experiments conducted in different configurations allowed to isolate parameters that have a decisive impact on the real-time performances of the simulator. {\textcopyright} 2011 IEEE.},
author = {Louali, Rabah and Belloula, Abdelmalek and Djouadi, Mohand Said and Bouaziz, Samir},
booktitle = {2011 19th Mediterranean Conference on Control and Automation, MED 2011},
doi = {10.1109/MED.2011.5983151},
title = {{Real-time characterization of Microsoft Flight Simulator 2004 for integration into Hardware in the Loop architecture}},
year = {2011}
}
@misc{Microsoft2020,
author = {Microsoft},
title = {{Microsoft Flight Simulator}},
url = {https://www.flightsimulator.com},
year = {2020}
}
@article{Willis2022,
abstract = {Trajectory tracking control for winged eVTOL aircraft is complicated by the high-angle-of-attack aerodynamics experienced during navigational flight occurring immediately after takeoff and immediately before landing. The total energy use of the vehicle can be reduced and the control performance can be improved by appropriately considering the pitch angle of the vehicle in varying flight conditions. We present a review of high-angle-of-attack aerodynamic models as well as an algorithm for finding the optimal pitch and thrust of a winged eVTOL throughout its flight regime. We show simulation results demonstrating a 75% reduction in tracking error over our previous work while maintaining a similar average thrust and an 85% reduction in tracking error over using a multirotor-like controller. The results show that the method is robust to modeling error in the stall characteristics.},
author = {Willis, Jacob B. and Beard, Randal W.},
doi = {10.1109/LCSYS.2021.3089130},
issn = {24751456},
journal = {IEEE Control Systems Letters},
title = {{Pitch and Thrust Allocation for Full-Flight-Regime Control of Winged eVTOL UAVs}},
volume = {6},
year = {2022}
}
@article{Cho2021,
abstract = {A novel robot-operating-system-based flight and mission state communication node for X-Plane 11 flight control simulation environments and its simulation results were discussed. Although the proposed communication method requires considerable implementation steps compared with the conventional MATLAB/Simulink-based User Datagram Protocol (UDP) block utilization method, the proposed method enables a direct comparison of cockpit-view images captured during flight with the flight data. This comparison is useful for data acquisition under virtual environments and for the development of flight control systems. The fixed/rotary-wing and ground terrain elements simulated in virtual environments exhibited excellent visualization outputs, which can overcome time and space constraints on flight experiments and validation of missionary algorithms with complex logic.},
author = {Cho, Sungwook},
file = {:home/seth/Downloads/Development of ROS-based Flight and Mission State Communication Node for X-Plane 11-based Flight Simulation Environment.pdf:pdf},
isbn = {8243229787},
journal = {Journal of Aerospace System Engineering},
keywords = {node,robot operating system,ros,x-plane 11 flight simulator},
number = {4},
pages = {75--84},
title = {{Development of ROS-based Flight and Mission State Communication Node for X-Plane 11-based Flight Simulation Environment}},
url = {https://www.koreascience.or.kr/article/JAKO202125761289606.pdf},
volume = {15},
year = {2021}
}
@article{Bondi2018a,
abstract = {Increases in poaching levels have led to the use of unmanned aerial vehicles (UAVs or drones) to count animals, locate animals in parks, and even find poachers. Finding poachers is often done at night through the use of long wave thermal infrared cameras mounted on these UAVs. Unfortunately, monitoring the live video stream from the conservation UAVs all night is an arduous task. In order to assist in this monitoring task, new techniques in computer vision have been developed. This work is based on a dataset which took approximately six months to label. However, further improvement in detection and future testing of autonomous flight require not only more labeled training data, but also an environment where algorithms can be safely tested. In order to meet both goals efficiently, we present AirSim-W, a simulation environment that has been designed specifically for the domain of wildlife conservation. This includes (i) creation of an African savanna environment in Unreal Engine, (ii) integration of a new thermal infrared model based on radiometry, (iii) API code expansions to follow objects of interest or fly in zig-zag patterns to generate simulated training data, and (iv) demonstrated detection improvement using simulated data generated by AirSim-W. With these additional simulation features, AirSim-W will be directly useful for wildlife conservation research.},
author = {Bondi, Elizabeth and Dey, Debadeepta and Kapoor, Ashish and Piavis, Jim and Shah, Shital and Fang, Fei and Dilkina, Bistra and Hannaford, Robert and Iyer, Arvind and Joppa, Lucas and Tambe, Milind},
doi = {10.1145/3209811.3209880},
file = {:home/seth/Downloads/3209811.3209880.pdf:pdf},
isbn = {9781450358163},
journal = {Proceedings of the 1st ACM SIGCAS Conference on Computing and Sustainable Societies, COMPASS 2018},
keywords = {Drones,Object detection,Simulation,Unmanned aerial vehicles,Wildlife conservation},
title = {{AirSim-W: A simulation environment for wildlife conservation with UAVs}},
year = {2018}
}
@inproceedings{Bondi2018,
abstract = {Increases in poaching levels have led to the use of unmanned aerial vehicles (UAVs or drones) to count animals, locate animals in parks, and even find poachers. Finding poachers is often done at night through the use of long wave thermal infrared cameras mounted on these UAVs. Unfortunately, monitoring the live video stream from the conservation UAVs all night is an arduous task. In order to assist in this monitoring task, new techniques in computer vision have been developed. This work is based on a dataset which took approximately six months to label. However, further improvement in detection and future testing of autonomous flight require not only more labeled training data, but also an environment where algorithms can be safely tested. In order to meet both goals efficiently, we present AirSim-W, a simulation environment that has been designed specifically for the domain of wildlife conservation. This includes (i) creation of an African savanna environment in Unreal Engine, (ii) integration of a new thermal infrared model based on radiometry, (iii) API code expansions to follow objects of interest or fly in zig-zag patterns to generate simulated training data, and (iv) demonstrated detection improvement using simulated data generated by AirSim-W. With these additional simulation features, AirSim-W will be directly useful for wildlife conservation research.},
author = {Bondi, Elizabeth and Dey, Debadeepta and Kapoor, Ashish and Piavis, Jim and Shah, Shital and Fang, Fei and Dilkina, Bistra and Hannaford, Robert and Iyer, Arvind and Joppa, Lucas and Tambe, Milind},
booktitle = {Proceedings of the 1st ACM SIGCAS Conference on Computing and Sustainable Societies, COMPASS 2018},
doi = {10.1145/3209811.3209880},
file = {:home/seth/Downloads/3209811.3209880.pdf:pdf},
isbn = {9781450358163},
keywords = {Drones,Object detection,Simulation,Unmanned aerial vehicles,Wildlife conservation},
title = {{AirSim-W: A simulation environment for wildlife conservation with UAVs}},
year = {2018}
}
@inproceedings{Meier2015,
abstract = {We present a novel, deeply embedded robotics middleware and programming environment. It uses a multithreaded, publish-subscribe design pattern and provides a Unix-like software interface for micro controller applications. We improve over the state of the art in deeply embedded open source systems by providing a modular and standards-oriented platform. Our system architecture is centered around a publish-subscribe object request broker on top of a POSIX application programming interface. This allows to reuse common Unix knowledge and experience, including a bash-like shell. We demonstrate with a vertical takeoff and landing (VTOL) use case that the system modularity is well suited for novel and experimental vehicle platforms. We also show how the system architecture allows a direct interface to ROS and to run individual processes either as native ROS nodes on Linux or nodes on the micro controller, maximizing interoperability. Our microcontroller-based execution environment has substantially lower latency and better hardware connectivity than a typical Robotics Linux system and is therefore well suited for fast, high rate control tasks.},
author = {Meier, Lorenz and Honegger, Dominik and Pollefeys, Marc},
booktitle = {Proceedings - IEEE International Conference on Robotics and Automation},
doi = {10.1109/ICRA.2015.7140074},
issn = {10504729},
number = {June},
title = {{PX4: A node-based multithreaded open source robotics framework for deeply embedded platforms}},
volume = {2015-June},
year = {2015}
}
@article{Garcia2010,
abstract = {This paper describes the development of a simulator for multiple Unmanned Aerial Vehicles (UAVs) utilizing the commercially available simulator X-Plane and Matlab. Coordinated control of unmanned systems is currently being researched for a wide range of applications, including search and rescue, convoy protection, and building clearing to name a few. Although coordination and control of Unmanned Ground Vehicles (UGVs) has been a heavily researched area, the extension towards controlling multiple UAVs has seen minimal attention. This lack of development is due to numerous issues including the difficulty in realistically modeling and simulating multiple UAVs. This work attempts to overcome these limitations by creating an environment that can simultaneously simulate multiple air vehicles as well as provide state data and control input for the individual vehicles using a heavily developed and commercially available flight simulator (X-Plane). This framework will allow researchers to study multi-UAV control algorithms using realistic unmanned and manned aircraft models in real-world modeled environments. Validation of the system's ability is shown through the demonstration of formation control algorithms implemented on four UAV helicopters with formation and navigation controllers built in Matlab/Simulink. {\textcopyright} 2009 Springer Science+Business Media B.V.},
author = {Garcia, Richard and Barnes, Laura},
doi = {10.1007/s10846-009-9372-4},
issn = {09210296},
journal = {Journal of Intelligent and Robotic Systems: Theory and Applications},
number = {1-4},
title = {{Multi-UAV Simulator Utilizing X-Plane}},
volume = {57},
year = {2010}
}
@inproceedings{Carlson2021,
abstract = {This work addresses the rapidly-prototyped design of a small Tricopter/Fixed-Wing Vertical Take-Off and Landing UAS with solar-recharge-capability, capable of repeatedly landing, recharging, and taking off, without need for physical intervention or externally placed maintenance devices or platforms. The design uses Fused Deposition Modeling 3D printing to rapidly prototype and fabricate the majority of the aircraft structures and parts. Provisions are made for carrying high-level single board computing solutions, or other similar payloads. Details are provided for mechanisms, aerodynamic geometry, solar cell integration and manufacturability. The design is analyzed to estimate inertial moments, aerodynamic performance, and static and dynamic stability. Simulation models for the Gazebo and RealFlight environments are provided, targeting Software-In-The-Loop architectures that run the ArduPilot and PX4 flight stacks. A flight testing methodology is developed, and results are presented with multiple prototype vehicles constructed. We finally contribute all production definitions, files, and models as open-access resources, with the goal of supporting and promoting migratory/swarming behavior and autonomy research.},
author = {Carlson, Stephen J. and Papachristos, Christos},
booktitle = {2021 International Conference on Unmanned Aircraft Systems, ICUAS 2021},
doi = {10.1109/ICUAS51884.2021.9476731},
title = {{The MiniHawk-VTOL: Design, Modeling, and Experiments of a Rapidly-prototyped Tiltrotor UAV}},
year = {2021}
}
@article{Marcu2011,
abstract = {The current article presents a fuzzy logic approach for creating an artificial intelligent and autonomous pilot for unmanned aerial vehicle. The article presents a new way of identifying the position of the UAV relative to a destination point, based on two angles: deflection angle and relative angle. The major advantage of the presented method (over other artificial intelligent methods like genetic programming or neural networks) is the way of taking decisions in real-time, without the need of presenting any domain specific data to the system before running the simulation. In this article, a professional flight simulator - Microsoft Flight Simulator X (FSX) - is used and its software development kit (SDK), and therefore, all computations are specific to this flight simulator. The aircraft that is used is a real UAV - General Atomics RQ/MQ-1 Predator - an FSX add-on.},
author = {Marcu, Eusebiu},
file = {:home/seth/Downloads/1156-1176-1-PB.pdf:pdf},
isbn = {4076851641},
issn = {14548658},
journal = {Control Engineering and Applied Informatics},
keywords = {Expert systems,Flight dynamics model (FDM),Flight simulators (FS),Fuzzy logic,Unmanned aerial vehicle (UAV)},
number = {1},
pages = {12--17},
title = {{Fuzzy Logic Approach in Real-time UAV Control}},
volume = {13},
year = {2011}
}
@phdthesis{Willis2021,
author = {Willis, Jacob B},
booktitle = {BYU ScholarsArchive},
file = {:home/seth/Downloads/Trajectory Generation and Tracking Control for Winged Electric Ve.pdf:pdf},
number = {8952},
school = {Brigham Young University},
title = {{Trajectory Generation and Tracking Control for Winged Electric Vertical Takeoff and Landing Aircraft}},
url = {https://scholarsarchive.byu.edu/etd},
volume = {Theses and},
year = {2021}
}
@inproceedings{Ma2020,
abstract = {In recent years, quadcopter aircrafts are widely used in various fields. Nowadays, the test methods for quadcopter can't meet the test requirements well. There are many shortcomings, such as it is inconducive for construction, not real enough, long development cycle, and so on. Aiming at these problems, this paper constructs a quadcopter aircrafts simulation environment based on AirSim, ROS, and PX4. Firstly, this paper introduces AirSim, ROS(Robot Operating System) and PX4 SITL (Software in the Loop). Secondly, this article describes the framework of this work and the communication way between different parts. Thirdly, two similar experiments were separately carried out in the simulation environment and the real environment. Finally, through the comparison of the test results, it proves that this simulation environment is real and efficient.},
author = {Ma, Chenxiang and Zhou, You and Li, Zhiqiang},
booktitle = {2020 6th International Conference on Control, Automation and Robotics, ICCAR 2020},
doi = {10.1109/ICCAR49639.2020.9108103},
title = {{A New Simulation Environment Based on Airsim, ROS, and PX4 for Quadcopter Aircrafts}},
year = {2020}
}
